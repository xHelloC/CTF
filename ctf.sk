options:
# server side options
    debug: 1
    dt: "&8[&c*&8]&r"
    tag: "&b &lCTF &r"
    title: send titleCenter( "&e.ιl&blιl&2lι. &r&lCapture the &3Flag &e.ιl&blιl&2lι.")
    back:   send formatted "<ttp:&cBack><cmd:/%{_back}%>&8&l[ &e≺&8&l ]" to {_s}
    status: "&cDisabled"
    ExpectedResponses: 3
# client side options
# vars
    [i]expand-x: 30
    [i]expand-y: 60
    [i]expand-z: 30
    [i]max_players: 14

# to run funcs
    status[ttp]: "&eClick&7 for choose this status"
    status[Running]: <ttp:%{_ttp}%><cmd:/1100111>
    status[No-Running]: <ttp:%{_ttp}%><cmd:/1100112>
    status[Preparing]: <ttp:%{_ttp}%><cmd:/1100113>
    status[Deactived]: <ttp:%{_ttp}%><cmd:/1100114>

    Size[1]: <ttp:%{_Sizettp1}%><cmd:/1100211>
    Size[2]: <ttp:%{_Sizettp2}%><cmd:/1100212>
    Size[3]: <ttp:%{_Sizettp3}%><cmd:/1100213>
    ttp[Size1]: "%nl% &7&lSize of &c&lSmall&7&l Arena %nl%&l&6 » &rX: &c%{ctf::core::sizes::small::x}% %nl%&l&6 » &rY: &c%{ctf::core::sizes::small::y}% %nl%&l&6 » &rZ: &c%{ctf::core::sizes::small::z}% %nl%&l&6 » &rMaxPlayers: &c%{ctf::core::sizes::small::players}%%nl%"
    ttp[Size2]: "%nl% &7&lSize of &e&lMedium&7&l Arena %nl%&l&6 » &rX: &e%{ctf::core::sizes::middle::x}% %nl%&l&6 » &rY: &e%{ctf::core::sizes::middle::y}% %nl%&l&6 » &rZ: &e%{ctf::core::sizes::middle::z}% %nl%&l&6 » &rMaxPlayers: &e%{ctf::core::sizes::middle::players}%%nl%"
    ttp[Size3]: "%nl% &7&lSize of &a&lBig&7&l Arena %nl%&l&6 » &rX: &a%{ctf::core::sizes::big::x}% %nl%&l&6 » &rY: &a%{ctf::core::sizes::big::y}% %nl%&l&6 » &rZ: &a%{ctf::core::sizes::big::z}% %nl%&l&6 » &rMaxPlayers: &a%{ctf::core::sizes::big::players}%%nl%"
# design

function setSize(s: sender, size: integer):
    {_size} is 1:
        set {ctf::core::sizes::small::x} to (({@[i]expand-x} / 2) / 2)
        set {ctf::core::sizes::small::y} to (({@[i]expand-y} / 2) / 2)
        set {ctf::core::sizes::small::z} to (({@[i]expand-z} / 2) / 2)
        set {ctf::core::sizes::small::players} to 4
        make {_s} say "small"
    else if {_size} is 2:
        set {ctf::core::sizes::middle::x} to ({@[i]expand-x} / 2)
        set {ctf::core::sizes::middle::y} to ({@[i]expand-y} / 2)
        set {ctf::core::sizes::middle::z} to ({@[i]expand-z} / 2)
        set {ctf::core::sizes::middle::players} to ({@[i]max_players} / 2)
        make {_s} say "middle"
    else if {_size} is 3:
        set {ctf::core::sizes::big::x} to {@[i]expand-x}
        set {ctf::core::sizes::big::y} to {@[i]expand-y}
        set {ctf::core::sizes::big::z} to {@[i]expand-z}
        set {ctf::core::sizes::big::players} to {@[i]max_players}
        make {_s} say "big"

on command:
    command = "1100111":
        cancel event
        statusType(sender, 1)
    else if command = "1100112":
        cancel event
        statusType(sender, 2)
    else if command = "1100113":
        cancel event
        statusType(sender, 3)
    else if command = "1100114":
        cancel event
        statusType(sender, 4)

    else if command = "1100211":
        cancel event
        setSize( sender , 1 )
    else if command = "1100212":
        cancel event
        setSize( sender , 2 )
    else if command = "1100213":
        cancel event
        setSize( sender , 3 )


function statusType(s: sender, type: integer = 1):
    {_type} is 1:
        make {_s} say "&aRunning"
    else if {_type} is 2:
        make {_s} say "&cNo-Running"
    else if {_type} is 3:
        make {_s} say "&6Preparing"
    else if {_type} is 4:
        make {_s} say "&4Deactived"
    else:
        make {_s} say "&4Deactived"




function ws(s: sender):
    send "" to {_s}
 
on load:
    #delete {ctf::instance::*}
    {ctf::help::commands::*} is not set:
        add "mapedit", "&efood&7/&eitems&7/&eores", "start", "stop" and "tpall" to {ctf::help::commands::*}
        send "%{@dt}%&r Help Command already loaded!" to console if {@debug} = 1
        {ctf::help::commands[sub]::*} is not set:
            add "%{@tag}%- Functions%nl% &8» &7id of arena%nl%", "&8» &7add%nl%", "&8» &7remove%nl%", "&8» &7info%nl%" and "&8» &7detail%nl%" to {ctf::help::commands[sub]::2::*}
            add "%{@tag}%- Functions%nl% %nl%&8» &7id of [food/items/ores]" to {ctf::help::commands[sub]::3::*}
            send "%{@dt}%&r Help Subcommand already loaded!" to console if {@debug} = 1

            {ctf::help::desc::*} is not set:
                add "<ttp:%{ctf::help::commands[sub]::2::*}%>This command contains with &f&oFunctions&7 of map edit<reset>", "<ttp:%{ctf::help::commands[sub]::3::*}%>This command contains with &fsetting for&7 Environments<reset>", "Will &fStart the event&7 and prepare for run.", "Will &fStop the event&7 and remove a data", "Will &fTeleport&7 all players with &fenabledTP&7.." to {ctf::help::desc::*}

on unload:
    clear {ctf::help::commands::*}, {ctf::help::commands[sub]::*}, {ctf::help::desc::*}

function canAddInstance(list: objects, search: object) :: boolean:
    if {_search} is not set:
        return false
    loop {_list::*}:
        if loop-value is {_search}:
            return false
    return true

function ClearChat(s: sender):
    loop 100 times:
        send "" to {_s}


function addInstance(s: sender, list: object, c: sender):
    set {count::i} to 0
    set {count::k} to 0
    set {rsp} to "none"
    ClearChat( {_s} )
    send centeredText( "&7&lInsert the &ename&7 of Instance", 154 ) to {_s}
    ws( {_s} )
    ws( {_s} )
    {onChat::%{_s}'s uuid%} is "deactived":
        delete {response::%{_s}'s uuid%::messages::*}
        set {onChat::%{_s}'s uuid%} to "active"
        while {onChat::%{_s}'s uuid%} is "active":
            wait 15 ticks
            set {_k} to size of {response::%{_s}'s uuid%::messages::*}
            send "%{@dt}%&7 Constant of K: %{_k}%" to {_c} if {@debug} = 1
            if {rsp} is "exist":
                set {onChat::%{_s}'s uuid%} to "deactived"
                stop
            if {_k} < {@ExpectedResponses}:
                set {onChat::%{_s}'s uuid%} to "active"
            {_k} = 1:
                {count::i} = 0:
                    send "%{@dt}% Registred &r" to {_c} if {@debug} = 1
                    add 1 to {count::i}
                    set {_rtn} to canAddInstance({ctf::%{_list}%::*}, {response::%{_s}'s uuid%::messages::1})
                    {_rtn} is true:
                        set {_ttp} to {@status[ttp]}
                        add {response::%{_s}'s uuid%::messages::1} to {ctf::%{_list}%::*}
                        set {_n} to size of {ctf::%{_list}%::*}
                        set {ctf::%{_list}%::%{_n}%::data::name} to {response::%{_s}'s uuid%::messages::1}
                        ClearChat( {_s} )
                        send centeredText( "&7&lInsert the &ename&7 of Instance", 154 ) to {_s}
                        ws( {_s} )
                        send centeredText( "&8&l[[ &e%{ctf::%{_list}%::%{_n}%::data::name}% &8&l]]", 144 ) to {_s}
                        ws( {_s} )
                        wait 10 ticks
                        ws( {_s} )
                        send centeredText( "&7&lChoose &eStatus&7 for that Instance", 154 ) to {_s}
                        ws( {_s} )
                        send formatted "    {@status[Running]}&8&l[&a Running &8&l]&r {@status[No-Running]}&8&l[&c No-Running &8&l]&r {@status[Preparing]}&8&l[&6 Preparing &8&l]&r {@status[Deactived]}&8&l[&4 Deactived &8&l]&r" to {_s}
                        ws( {_s} )
                    else:
                        ClearChat( {_s} )
                        send centeredText( "&7&lInsert the &ename&7 of Instance", 154 ) to {_s}
                        set {_error} to "&cOpps!&7 This name &c%{response::%{_s}'s uuid%::messages::1}% &7of Instance is currently used"
                        send centeredText( {_error}, 154 ) to {_s}
                        ws( {_s} )
                        ws( {_s} )
                        set {rsp} to "exist"
            {_k} = 2:
                {count::k} = 0:
                    set {_Sizettp1} to {@ttp[Size1]}
                    set {_Sizettp2} to {@ttp[Size2]}
                    set {_Sizettp3} to {@ttp[Size3]}
                    send "%{@dt}%&r Registred Status" to {_c} if {@debug} = 1
                    add 1 to {count::k}
                    set {ctf::%{_list}%::%{_n}%::data::status} to {response::%{_s}'s uuid%::messages::2}
                    ws( {_s} )
                    send centeredText( "&7&lChoose &eSize&7 of Instance &b%{response::%{_s}'s uuid%::messages::1}%", 154 ) to {_s}
                    ws( {_s} )
                    send formatted "                     {@Size[1]}&8&l[&c Small &8&l]<reset> {@Size[2]}&8&l[&e Middle &8&l]<reset> {@Size[3]}&8&l[&a Big &8&l]<reset>" to {_s}
                    ws( {_s} )
            {_k} = 3:
                wait 1 seconds
                ClearChat( {_s} )
                send centeredText( "&7&lInstance &e%{response::%{_s}'s uuid%::messages::1}%&7 with status %{response::%{_s}'s uuid%::messages::2}%&7 was &aCreated!", 169 ) to {_s}
                broadcast {response::%{_s}'s uuid%::messages::3}
                loop {ctf::core::sizes::%{response::%{_s}'s uuid%::messages::3}%::*}:
                    broadcast "%loop-index% as %loop-value%"
                ws( {_s} )
                ws( {_s} )



  
            





function removeInstance(s: sender, list: object, removeInstance: string):
    canAddInstance({ctf::%{_list}%::*}, {_removeInstance}) is false:
        set {_rtn} to true
    else:
        set {_rtn} to false

    broadcast {_rtn}
    {_rtn} is true:
        remove {_removeInstance} from {ctf::%{_list}%::*}

function listInstance(s: sender, list: string):
    ws( {_s} )
    ClearChat( {_s} )
    {@title} to {_s}
    send centeredText( "&8&l( &o&eList of instance's &8&l)", 154 ) to {_s}
    ws( {_s} )
    {ctf::%{_list}%::*} is not set:
        send "&8&l» &7There are nothing to see! &cNo Instance's" to {_s}
    else:
        loop {ctf::%{_list}%::*}:
            send formatted "&8&l» <ttp:&7Click for get information about &binstance id &a%loop-index%><cmd:/ctfadmin mapedit %loop-index%>[&a • &8]&r  &7&o%loop-value%" to {_s}
    ws( {_s} )
    ws( {_s} )
    set {_back} to "ctfadmin mapedit"
    {@back}

function listInstanceInformation(s: sender, list: string, id: integer) :: boolean:
    loop {ctf::%{_list}%::*}:
        {_id} = (loop-index parsed as integer):
            set {_newid} to loop-value
            ws( {_s} )
            ClearChat( {_s} )
            {@title} to {_s}
            send centeredText( "&8&l( &o&eInstance %{_newid}% &8&l)", 154 ) to {_s}
            ws( {_s} )
            {ctf::%{_list}%::%{_id}%::data::*} is not set:
                send "&8&l» &cUpss! &7There are &cnot&7 any data!" to {_s}
            else:
                send "%{ctf::%{_list}%::%{_id}%::data::*}%" to {_s}
            ws( {_s} )
    set {_back} to "ctfadmin mapedit list"
    {@back}



function IAmenu(s: sender, c: sender = "", value-1: string, value-2: string="", value-3: object="none", value-4: string):
    {_value-1} is "admin":
        {_value-2} is not set:
            ClearChat( {_s} )
            {@title} to {_s}
            send centeredText( "&8&l( &o&eStatus : %{@status}% &8&l)", 154 ) to {_s}
            ws( {_s} )
            send formatted "<ttp:&6Help&7 all command's of skript><cmd:/ctfadmin help>&8&l» &eHelp" to {_s} 
            send formatted "<ttp:&aMapedit&7 Edit whole isntances><cmd:/ctfadmin mapedit>&8&l» &eMapedit" to {_s} 
            send formatted "<ttp:&7Map &7All &aEnvironments&7 for Food/items/ore><cmd:/.>&8&l» &eEnvironments" to {_s} 
            send formatted "<ttp:&7Setting><cmd:/.>&8&l» &cSetting" to {_s} 
            ws( {_s} )
            {@debug} = 1:
                send "%{@dt}% &rAdmin IAmenu" to {_c}
        else if {_value-2} is "help" or "?" or "??":
            send "%{@dt}%&r Help-Admin-IAmenu" to {_c} if {@debug} = 1
            ClearChat( {_s} )
            {@title} to {_s}
            send centeredText( "&8&l( &o&eHelp &8&l)", 154 ) to {_s}
            ws( {_s} )
            loop {ctf::help::commands::*}:
                send formatted "&8&l»  &o&e%loop-value%&7 - %{ctf::help::desc::%loop-index%}%" to {_s}
            ws( {_s} )
            set {_back} to "ctfadmin"
            {@back}
        else if {_value-2} is "mapedit" or "editmap":
            {_value-3} is not set:
                send "%{@dt}%&r Mapedit-Admin-IaMenu" to {_c} if {@debug} = 1
                ClearChat( {_s} )
                {@title} to {_s}
                send centeredText( "&8&l( &o&eMapedit &8&l)", 154 ) to {_s}
                ws( {_s} )
                send formatted "<ttp:&6List&7 of instance's><cmd:/ctfadmin mapedit list>&8&l» &eMap List" to {_s} 
                send formatted "<ttp:&aCreate&7 new instance of map><cmd:/ctfadmin mapedit add>&8&l» &eAdd Map" to {_s} 
                send formatted "<ttp:&7Map &binformation><cmd:/.>&8&l» &eMap info" to {_s} 
                send formatted "<ttp:&7Map &eDetail><cmd:/.>&8&l» &eMap detail" to {_s} 
                ws( {_s} )
                set {_back} to "ctfadmin"
                {@back}
            else if {_value-3} is "add":
                send "&8&lLOGIC&7 for add" to {_s}
                addInstance( {_s}, "instance", {_c})

            else if {_value-3} is "remove":
                send "&8&lLOGIC&7 for remove" to {_s}
                removeInstance( {_s}, "instance", {_value-4} )

            else if {_value-3} is "list":
                send "&8&lLOGIC&7 for list" to {_s}
                listInstance( {_s} , "instance")

            else if {_value-3} is "detail":
                send "&8&lLOGIC&7 for detail" to {_s}

            else if ({_value-3} parsed as integer) is integer:
                listInstanceInformation( {_s}, "instance", ({_value-3} parsed as integer) )

            else:
                send "%{@tag}% &cUncorrect usage!&7 Use &e/ctfadmin ?" to {_s} 




        else if {_value-2} is "items" or "food" or "ores":
            send "%{@dt}%&r Environments&7(&a%{_value-2}%&7)-Admin-IaMenu" to {_c} if {@debug} = 1
            ClearChat( {_s} )
            {@title} to {_s}
            send centeredText( "&8&l( &o&eEnvironments&7(&a%{_value-2}%&7) &8&l)", 154 ) to {_s}
            ws( {_s} )
            # data here
            ws( {_s} )
            set {_back} to "ctfadmin"
            {@back}
        else if {_value-2} is "start" or "stop" or "turn":
            send "%{@dt}%&r Controll&7 - (&a%{_value-2}%&7)-Admin-IaMenu" to {_c} if {@debug} = 1
            ClearChat( {_s} )
            {@title} to {_s}
            send centeredText( "&8&l( &o&eControll&7 - (&a%{_value-2}%&7) &8&l)", 154 ) to {_s}
            ws( {_s} )
            # data here
            ws( {_s} )
            set {_back} to "ctfadmin"
            {@back}      
        else if {_value-2} is "tpall":
            send "%{@dt}%&r Teleport-Admin-IaMenu" to {_c} if {@debug} = 1
            ClearChat( {_s} )
            {@title} to {_s}
            send centeredText( "&8&l( &o&eTeleport &8&l)", 154 ) to {_s}
            ws( {_s} )
            # data here
            ws( {_s} )
            set {_back} to "ctfadmin"
            {@back}
        else:
            {_value-3} is not set:
                send "%{@tag}% &cUncorrect usage!&7 Use &e/ctfadmin ?" to {_s}            


        
    else if {_value-1} is "player":
        {@debug} = 1:
            send "%{@dt}% &rPlayer IaMenu" to {_c}
    
    else:
        send "%{@tag}% &cUncorrect usage!" to {_s}



command focusproduction:capturetheflagadmin [<string>] [<text>] [<string>]:
    aliases: ctfadmin, cadmin
    trigger:
        IAmenu( player, console, "admin", arg-1, arg-2, arg-3 )


command 222 [<string>]:
    trigger:
        if arg-1 is "reset":
            delete {ctf::instance::*}
        loop {ctf::instance::*}:
            send "%loop-index% as %loop-value%"

# every 1 second:
#     loop all players:
#         broadcast "%loop-player% as %{onChat::%loop-player's uuid%}%"


on Chat:
    {onChat::%sender's uuid%} is "active":
        set {_s} to sender
        cancel event
        add message to {response::%{_s}'s uuid%::messages::*}
        set {onChat::%{_s}'s uuid%} to "deactived"




















































































command focusproduction:capturetheflag [<string>] [<string>]:
    aliases: ctf
    trigger:
        #IAmenu( player, console, "player" )













































